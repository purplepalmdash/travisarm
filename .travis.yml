arch:
  - arm64

script:
  - cd src
  - wget https://my-netdata.io/kickstart.sh && sudo chmod 777 kickstart.sh
  - sudo ./kickstart.sh
  #- mkdir -p offline/rong_static/for_addons 
  #- mkdir -p offline/rong_static/for_cluster
  #- mkdir -p offline/rong_static/for_master0
  ### 1. ansible_exe and ansible-playbook_exe
  #- printf '#!/bin/sh\npython /usr/local/ansible $@'>offline/rong_static/for_master0/ansible_exe
  #- printf '#!/bin/sh\npython /usr/local/ansible-playbook $@'>offline/rong_static/for_master0/ansible-playbook_exe
  #- chmod 777 offline/rong_static/for_master0/ansible*
  #- cd offline/rong_static/for_master0
  ## 2. caddy v2.1.0-beta.1 binary file(https://github.com/caddyserver/caddy/releases)
  #- mkdir -p tmp
  #- wget --quiet https://github.com/caddyserver/caddy/releases/download/v2.1.0-beta.1/caddy_2.1.0-beta.1_linux_arm64.tar.gz
  #- tar xzf caddy_2.1.0-beta.1_linux_arm64.tar.gz -C tmp
  #- rm -f  caddy_2.1.0-beta.1_linux_arm64.tar.gz 
  #- mv tmp/caddy .
  #- rm -rf tmp/
  ## 3. caddy8333.service.template
  #- wget --quiet https://gist.githubusercontent.com/purplepalmdash/e56575c6858e2f1ea63eb41c04733c40/raw/103cb7f05e13b2c3d935bcb3d01e770cca7bbeb7/caddy8333.service.template
  ## 4. coredns v1.6.9 binary file(https://github.com/coredns/coredns/releases)
  #- wget --quiet https://github.com/coredns/coredns/releases/download/v1.6.9/coredns_1.6.9_linux_arm64.tgz
  #- tar xzf coredns_1.6.9_linux_arm64.tgz
  #- rm -f coredns_1.6.9_linux_arm64.tgz
  ## 5. docker-compose v1.26.0 (https://github.com/docker/compose/releases)
  #- wget --quiet https://github.com/ubiquiti/docker-compose-aarch64/releases/download/1.22.0/docker-compose-Linux-aarch64
  #- mv docker-compose-Linux-aarch64 docker-compose && chmod 777 docker-compose
  ## 6. podman-compose beta(https://github.com/containers/podman-compose)
  #- wget --quiet -O podman-compose https://raw.githubusercontent.com/containers/podman-compose/devel/podman_compose.py && chmod 777 podman-compose
  ## 7. portable-ansible(https://github.com/purplepalmdash/portable-ansible/releases/tag/v0.4.2)
  #- wget --quiet https://github.com/purplepalmdash/portable-ansible/releases/download/v0.4.2/portable-ansible-v0.4.2-py2.tar.bz2
  #- wget --quiet https://github.com/purplepalmdash/portable-ansible/releases/download/v0.4.2/portable-ansible-v0.4.2-py3.tar.bz2
  ## 8. registry(https://github.com/docker/distribution-library-image/blob/master/amd64/registry)
  #- wget --quiet https://github.com/docker/distribution-library-image/raw/master/arm64/registry && chmod 777 registry
  ## 9. 1804debs.tar.xz & 2004debs.tar.xz
  ## 20.04
  #- docker run  -v `pwd`:/mnt -d --name deb2004 ubuntu:20.04 sleep 3600
  ##docker exec deb2004 wget -O /etc/apt/sources.list https://gist.githubusercontent.com/purplepalmdash/13b61f10baca2dc8816ea68e0c6d06c7/raw/c0c1fffc3f343612d6f34bbbbdcd4c941cb70479/sources.list
  #- docker exec deb2004 rm -f /etc/apt/apt.conf.d/docker-clean
  #- docker exec deb2004 apt-get update -qq 
  #- docker exec deb2004 apt-get install -qq -y ipset ipvsadm iotop net-tools sshpass iputils-ping nethogs python-netaddr build-essential nfs-common nfs-kernel-server tcpdump unzip wget apt-transport-https socat rpcbind arping fping python-apt pigz
  ##- docker exec deb2004  wget -O /tmp/Release.key https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key
  ##- docker exec deb2004 apt-key add /tmp/Release.key
  ##- docker exec deb2004 /bin/sh -c "echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/ /'>/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
  ##- docker exec deb2004 apt-get -qq -y update
  ##- docker exec deb2004 apt-get -qq -y install podman
  #- docker exec deb2004 mkdir -p /mnt/Rong
  #- docker exec deb2004 /bin/sh -c "find /var/cache | grep deb$ | xargs -I % cp % /mnt/Rong/"
  #- docker exec deb2004 /bin/sh -c "cd /mnt/Rong && dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz"
  #- docker stop deb2004
  #- docker rm deb2004
  #- tar cf 2004debs.tar Rong
  #- xz -T4 2004debs.tar
  #- sudo rm -rf Rong
  ## 18.04.4
  #- docker run  -v `pwd`:/mnt -d --name deb1804 ubuntu:18.04 sleep 3600
  #- docker exec deb1804 rm -f /etc/apt/apt.conf.d/docker-clean
  #- docker exec deb1804 apt-get update -qq 
  #- docker exec deb1804 apt-get install -qq -y ipset ipvsadm iotop net-tools sshpass iputils-ping nethogs python-netaddr build-essential nfs-common nfs-kernel-server tcpdump unzip wget apt-transport-https socat rpcbind arping fping python-apt pigz
  #- docker exec deb1804 mkdir -p /mnt/Rong
  #- docker exec deb1804 /bin/sh -c "find /var/cache | grep deb$ | xargs -I % cp % /mnt/Rong/"
  #- docker exec deb1804 /bin/sh -c "cd /mnt/Rong && dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz"
  #- docker stop deb1804
  #- docker rm deb1804
  #- tar cf 1804debs.tar Rong
  #- xz -T4 1804debs.tar
  #- sudo rm -rf Rong
  #- sudo apt-get update -y && sudo apt-get install -y tree
  #- ls *
  ## 10. dockerDebs.tar.gz
  ## fetch back the debs
  #- docker run  -v `pwd`:/mnt -d --name debdocker ubuntu:20.04 sleep 3600
  #- docker exec debdocker apt-get update -qq
  #- docker exec debdocker apt-get install -qq -y apt-mirror
  #- docker exec debdocker mkdir -p /mnt/tmpdocker
  #- printf 'set base_path /mnt/tmpdocker\nset nthreads     20\nset _tilde 0\ndeb https://download.docker.com/linux/ubuntu bionic stable\ndeb https://download.docker.com/linux/ubuntu focal stable\n'>mirror.list
  #- docker cp mirror.list debdocker:/etc/apt/mirror.list
  #- docker exec debdocker apt-mirror
  #- rm -f mirror.list
  #- docker stop debdocker
  #- docker rm debdocker
  ## Shrink the repository
  #- sudo mv tmpdocker/mirror/download.docker.com/linux/ubuntu/ .
  #- sudo rm -rf tmpdocker
  #- currentdir=`pwd`
  #- cd ubuntu/dists/focal/pool/stable/arm64/
  #- latest_containerd=`ls -lt containerd* | sed -n '1p' | awk {'print $9'}`
  #- latest_dockerce=`ls -lt docker-ce_* | sed -n '1p' | awk {'print $9'}`
  #- latest_dockercecli=`ls -lt docker-ce-cli* | sed -n '1p' | awk {'print $9'}`
  #- sudo rm -f !($latest_containerd|$latest_dockerce|$latest_dockercecli)
  #- cd $currentdir
  #- cd ubuntu/dists/bionic/pool/stable/arm64/
  #- latest_containerd=`ls -lt containerd* | sed -n '1p' | awk {'print $9'}`
  #- latest_dockerce=`ls -lt docker-ce_* | sed -n '1p' | awk {'print $9'}`
  #- latest_dockercecli=`ls -lt docker-ce-cli* | sed -n '1p' | awk {'print $9'}`
  #- sudo rm -f !($latest_containerd|$latest_dockerce|$latest_dockercecli)
  #- cd $currentdir
  #- tar czvf dockerDebs.tar.gz ubuntu
  #- sudo rm -rf ubuntu
  #- ls * -l -h
  #- cd ..
  #### Following is for kubespray docker images
  #- sudo apt-get install -y git python-pip python3-virtualenv python3-pip python3-venv python-docker python3-docker openssh-server
  #- mkdir -p /var/run/sshd && /usr/sbin/sshd -D & 
  #- mkdir -p /home/travis/build/purplepalmdash/travisarm/src/cached2
  #- python3 -m pip install --user --upgrade pip && python3 -m pip install --user virtualenv
  #- git clone https://github.com/kubernetes-sigs/kubespray.git
  #- sudo mkdir -p /etc/kubernetes && sudo chmod 777 -R /etc/kubernetes
  #- cd kubespray && git checkout tags/v2.13.1 -b kubespray2131 
  #- sed -i '14,21 s/^/#/' ./roles/download/tasks/download_file.yml
  #- sed -i '93,99 s/^/#/' ./roles/download/tasks/download_file.yml
  #- wget http://209.141.35.192/patched/dinddiffarm64.diff
  #- wget http://209.141.35.192/patched/cluster1.yml
  #- wget http://209.141.35.192/patched/rong-vars.yml
  #- wget http://209.141.35.192/patched/hosts.ini
  #- cp hosts.ini inventory/sample/hosts.ini
  #- ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa 2>/dev/null <<< y >/dev/null
  #- cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
  #- cat dinddiffarm64.diff | patch -p1
  #- python3 -m venv env && python3 -m venv env && source env/bin/activate 
  #- pip3 install --upgrade setuptools
  #- pip3 install  --no-cache-dir -r requirements.txt
  #- ansible-playbook -i inventory/sample/hosts.ini cluster1.yml --extra-vars @rong-vars.yml
  #- sudo rm -rf /home/travis/build/purplepalmdash/travisarm/src/cached/*
  #- ls /home/travis/build/purplepalmdash/travisarm/src/cached1/*
  #- sudo rm -rf /home/travis/build/purplepalmdash/travisarm/src/cached2/*
  #- cd .. && sudo rm -rf kubespray
  ## docker load all of the images and push them to the local registry server
  #- mkdir -p registry
  #- docker run -v `pwd`/registry:/var/lib/registry -d -p 5000:5000 --restart=always --name registry registry:2
  #- echo >images1.txt
  #- ls -1 /home/travis/build/purplepalmdash/travisarm/src/cached1/images/*.tar | xargs --no-run-if-empty -L 1 docker load -i | grep "Loaded image" | tee -a images1.txt
  #- cut -c 15- images1.txt>images.txt && sed -i '/^$/d' images.txt
  #- cat images.txt | awk {'print "docker tag " $1" 127.0.0.1:5000/"$1'} | tee tag.sh
  #- cat images.txt | awk {'print "docker push 127.0.0.1:5000/"$1'} | tee push.sh
  #- sudo chmod 777 tag.sh push.sh
  #- ./tag.sh
  #- ./push.sh
  #- docker pull feipyang/install-socat
  #- docker tag feipyang/install-socat 127.0.0.1:5000/feipyang/install-socat
  #- docker tag registry:2 127.0.0.1:5000/registry:2
  #- docker push 127.0.0.1:5000/registry:2
  #- docker push 127.0.0.1:5000/feipyang/install-socat
  #- docker stop registry
  #- cd registry && sudo tar czf docker.tar.gz docker && sudo mv docker.tar.gz ../ && cd ..
  #- sudo rm -rf registry && sudo mv docker.tar.gz for_master0
  #- sudo rm -rf /home/travis/build/purplepalmdash/travisarm/src/cached1/images/
  #- sudo mv /home/travis/build/purplepalmdash/travisarm/src/cached1/* for_cluster/
  #- sudo apt-get install -y sshpass
  #- sshpass -p $vpspassword scp -P2282 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r /home/travis/build/purplepalmdash/travisarm/src/ root@209.141.35.192:/root/static


#deploy:
#  provider: pages
#  skip_cleanup: true
#  local_dir: src/public
#  github_token: $GITHUB_TOKEN # Set in travis-ci.org dashboard
#  on:
#    branch: master
#  repo: purplepalmdash/purplepalmdash.github.io
#  target_branch: master

